// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"time"
)

const (
	// Label holds the string label denoting the transaction type in the database.
	Label = "transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDatetime holds the string denoting the datetime field in the database.
	FieldDatetime = "datetime"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldSenderID holds the string denoting the sender_id field in the database.
	FieldSenderID = "sender_id"
	// FieldRecipientID holds the string denoting the recipient_id field in the database.
	FieldRecipientID = "recipient_id"
	// EdgeSender holds the string denoting the sender edge name in mutations.
	EdgeSender = "sender"
	// EdgeRecipient holds the string denoting the recipient edge name in mutations.
	EdgeRecipient = "recipient"
	// Table holds the table name of the transaction in the database.
	Table = "transactions"
	// SenderTable is the table that holds the sender relation/edge.
	SenderTable = "transactions"
	// SenderInverseTable is the table name for the Wallet entity.
	// It exists in this package in order to avoid circular dependency with the "wallet" package.
	SenderInverseTable = "wallets"
	// SenderColumn is the table column denoting the sender relation/edge.
	SenderColumn = "sender_id"
	// RecipientTable is the table that holds the recipient relation/edge.
	RecipientTable = "transactions"
	// RecipientInverseTable is the table name for the Wallet entity.
	// It exists in this package in order to avoid circular dependency with the "wallet" package.
	RecipientInverseTable = "wallets"
	// RecipientColumn is the table column denoting the recipient relation/edge.
	RecipientColumn = "recipient_id"
)

// Columns holds all SQL columns for transaction fields.
var Columns = []string{
	FieldID,
	FieldDatetime,
	FieldAmount,
	FieldSenderID,
	FieldRecipientID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDatetime holds the default value on creation for the "datetime" field.
	DefaultDatetime time.Time
)
