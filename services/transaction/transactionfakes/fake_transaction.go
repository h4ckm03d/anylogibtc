// Code generated by counterfeiter. DO NOT EDIT.
package transactionfakes

import (
	"anylogibtc/services/transaction"
	"sync"
)

type FakeTransaction struct {
	HistoryStub        func(transaction.HistoryParams) transaction.HistoriesDTO
	historyMutex       sync.RWMutex
	historyArgsForCall []struct {
		arg1 transaction.HistoryParams
	}
	historyReturns struct {
		result1 transaction.HistoriesDTO
	}
	historyReturnsOnCall map[int]struct {
		result1 transaction.HistoriesDTO
	}
	SendStub        func(transaction.TransactionDTO) error
	sendMutex       sync.RWMutex
	sendArgsForCall []struct {
		arg1 transaction.TransactionDTO
	}
	sendReturns struct {
		result1 error
	}
	sendReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTransaction) History(arg1 transaction.HistoryParams) transaction.HistoriesDTO {
	fake.historyMutex.Lock()
	ret, specificReturn := fake.historyReturnsOnCall[len(fake.historyArgsForCall)]
	fake.historyArgsForCall = append(fake.historyArgsForCall, struct {
		arg1 transaction.HistoryParams
	}{arg1})
	stub := fake.HistoryStub
	fakeReturns := fake.historyReturns
	fake.recordInvocation("History", []interface{}{arg1})
	fake.historyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTransaction) HistoryCallCount() int {
	fake.historyMutex.RLock()
	defer fake.historyMutex.RUnlock()
	return len(fake.historyArgsForCall)
}

func (fake *FakeTransaction) HistoryCalls(stub func(transaction.HistoryParams) transaction.HistoriesDTO) {
	fake.historyMutex.Lock()
	defer fake.historyMutex.Unlock()
	fake.HistoryStub = stub
}

func (fake *FakeTransaction) HistoryArgsForCall(i int) transaction.HistoryParams {
	fake.historyMutex.RLock()
	defer fake.historyMutex.RUnlock()
	argsForCall := fake.historyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTransaction) HistoryReturns(result1 transaction.HistoriesDTO) {
	fake.historyMutex.Lock()
	defer fake.historyMutex.Unlock()
	fake.HistoryStub = nil
	fake.historyReturns = struct {
		result1 transaction.HistoriesDTO
	}{result1}
}

func (fake *FakeTransaction) HistoryReturnsOnCall(i int, result1 transaction.HistoriesDTO) {
	fake.historyMutex.Lock()
	defer fake.historyMutex.Unlock()
	fake.HistoryStub = nil
	if fake.historyReturnsOnCall == nil {
		fake.historyReturnsOnCall = make(map[int]struct {
			result1 transaction.HistoriesDTO
		})
	}
	fake.historyReturnsOnCall[i] = struct {
		result1 transaction.HistoriesDTO
	}{result1}
}

func (fake *FakeTransaction) Send(arg1 transaction.TransactionDTO) error {
	fake.sendMutex.Lock()
	ret, specificReturn := fake.sendReturnsOnCall[len(fake.sendArgsForCall)]
	fake.sendArgsForCall = append(fake.sendArgsForCall, struct {
		arg1 transaction.TransactionDTO
	}{arg1})
	stub := fake.SendStub
	fakeReturns := fake.sendReturns
	fake.recordInvocation("Send", []interface{}{arg1})
	fake.sendMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTransaction) SendCallCount() int {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	return len(fake.sendArgsForCall)
}

func (fake *FakeTransaction) SendCalls(stub func(transaction.TransactionDTO) error) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = stub
}

func (fake *FakeTransaction) SendArgsForCall(i int) transaction.TransactionDTO {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	argsForCall := fake.sendArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTransaction) SendReturns(result1 error) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = nil
	fake.sendReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransaction) SendReturnsOnCall(i int, result1 error) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = nil
	if fake.sendReturnsOnCall == nil {
		fake.sendReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransaction) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.historyMutex.RLock()
	defer fake.historyMutex.RUnlock()
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTransaction) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ transaction.Transaction = new(FakeTransaction)
